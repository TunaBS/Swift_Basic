// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters
//string literals
let someString = "Some string literal value"
print(someString)
//multiline strings
let quotation = """
The White Rabbit put on his spectacles.  "Where shall I begin,
please your Majesty?" he asked.
"Begin at the beginning," the King said gravely, "and go on
till you come to the end; then stop."
"""
print(quotation)
let singleLineString = "These are the same." //none of the following strings start or end with a line break
let multilineString = """
These are the same.
"""
print(singleLineString)
print(multilineString)
//blackslah dile string er vitore line break dekhabe na
let softWrappedQuotation = """
The White Rabbit put on his spectacles.  "Where shall I begin, \
please your Majesty?" he asked.

"Begin at the beginning," the King said gravely, "and go on \
till you come to the end; then stop."
"""
print(softWrappedQuotation)

let lineBreaks = """

This string starts with a line break.
It also ends with a line break.

"""
print(lineBreaks)


//special characters in string literals
let wiseWords = "\"Imagination is more important than knowledge\" - Einstein"
// "Imagination is more important than knowledge" - Einstein
let dollarSign = "\u{24}"        // $,  Unicode scalar U+0024
let blackHeart = "\u{2665}"      // ‚ô•,  Unicode scalar U+2665
let sparklingHeart = "\u{1F496}" // üíñ, Unicode scalar U+1F496
print(wiseWords, dollarSign, blackHeart, sparklingHeart)
let threeDoubleQuotationMarks = """
Escaping the first quotation mark \"""
Escaping all three quotation marks \"\"\"
"""
print(threeDoubleQuotationMarks)

//Extended String delimiers
/*
print(#"Line 1\nLine 2"#) //prints=========Line 1\nLine 2
print("Line 1\nLine 2")   // prints line1 in one line and line 2 in another line
print(#"Line 1\#nLine 2"#)  //output same as above one; different line
let threeMoreDoubleQuotationMarks = #"""
Here are three more double quotes: """
"""#
print(threeMoreDoubleQuotationMarks)*/

//Initializing an empty String
var emptyString = ""               // empty string literal
var anotherEmptyString = String()  // initializer syntax
// these two strings are both empty, and are equivalent to each other

if emptyString.isEmpty {
    print("Nothing to see here")
}

//String Mutability
var variableString = "Horse"
variableString += " and carriage" // variableString is now "Horse and carriage"
print(variableString)
let constantString = "Highlander"
//constantString += " and another Highlander" //error ashbe


//Working with character
for character in "Dog!üê∂" {
    print(character)
}

let exclamationMark: Character = "!"
print(exclamationMark)
let catCharacters: [Character] = ["C", "a", "t", "!", "üê±"]
let catString = String(catCharacters)
print(catString)

//Concatenating String and Character
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2
print(welcome)
var instruction = "look over"
instruction += string2
print(instruction)
// let exclamationMark: Character = "!"
welcome.append(exclamationMark)
print(welcome) // welcome now equals "hello there!"

let badStart = """
    one
    two
    """
let end = """
    three
    """
print(badStart + end)
let goodStart = """
    one
    two

    """
print(goodStart + end)

//String interpolation

let multiplier = 3
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
print(message)
print(#"Write an interpolated string in Swift using \(multiplier)."#)
// Prints "Write an interpolated string in Swift using \(multiplier).
print(#"6 times 7 is \#(6 * 7)."#)

//Extended grapheme clusters
let eAcute: Character = "\u{E9}"                         // √©
let combinedEAcute: Character = "\u{65}\u{301}"
print(eAcute)
print(combinedEAcute)
let precomposed: Character = "\u{D55C}"                  // Ìïú
let decomposed: Character = "\u{1112}\u{1161}\u{11AB}"
print(precomposed)
print(decomposed)
let enclosedEAcute: Character = "\u{E9}\u{20DD}"
print(enclosedEAcute)
let regionalIndicatorForUS: Character = "\u{1F1FA}\u{1F1F8}"
// regionalIndicatorForUS is üá∫üá∏
print(regionalIndicatorForUS)

let unusualMenagerie = "Koala üê®, Snail üêå, Penguin üêß, Dromedary üê™"
print("unusualMenagerie has \(unusualMenagerie.count) characters")
// Prints "unusualMenagerie has 40 characters"
var word = "cafe"
print("the number of characters in \(word) is \(word.count)")
// Prints "the number of characters in cafe is 4"
word += "\u{301}"    // COMBINING ACUTE ACCENT, U+0301
print("the number of characters in \(word) is \(word.count)")